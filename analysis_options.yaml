# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
include: package:flutter_lints/flutter.yaml

analyzer: 
  exclude:
    - '**/*.g.dart'

  errors:
    missing_required_param: warning
    missing_return: warning
    todo: ignore

  strong-mode:
    implicit-casts: false
    implicit-dynamic: false

linter:
  rules:
    - always_declare_return_types
    - always_put_control_body_on_new_line
    - avoid_print
    - avoid_redundant_argument_values
    - avoid_returning_null_for_future
    - avoid_types_as_parameter_names
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - avoid_web_libraries_in_flutter
    - camel_case_types
    - comment_references
    - constant_identifier_names
    - control_flow_in_finally
    - curly_braces_in_flow_control_structures
    - avoid_empty_else
    - empty_catches
    - empty_constructor_bodies
    - unnecessary_const
    - unnecessary_new
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_final_fields
    - prefer_for_elements_to_map_fromIterable
    - prefer_generic_function_type_aliases
    - prefer_if_null_operators
    - prefer_inlined_adds
    - prefer_is_empty
    - prefer_single_quotes
    - prefer_spread_collections
    - sized_box_for_whitespace
    - sort_constructors_first
    - type_init_formals
    - unnecessary_brace_in_string_interps
    - unnecessary_getters_setters
    - unnecessary_lambdas
    - unnecessary_this
    - use_full_hex_values_for_flutter_colors
    - use_key_in_widget_constructors
    - use_rethrow_when_possible
    - valid_regexps
    - use_super_parameters